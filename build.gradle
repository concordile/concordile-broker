plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootPluginVersion}"
    id 'io.spring.dependency-management' version "${springDepManPluginVersion}"
    id 'org.graalvm.buildtools.native' version "${graalvmPluginVersion}"
    id 'org.hibernate.orm' version "${hibernatePluginVersion}"
}

group = 'io.github.concordile'
version = '0.1.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.postgresql:postgresql'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructVersion}"
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation 'com.h2database:h2'

    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
}

tasks.named('test') {
    useJUnitPlatform()
}

hibernate {
    enhancement {
        enableAssociationManagement = true
    }
}

bootBuildImage {
    def registry = project.findProperty('github.pkg.docker.registry') ?: System.getenv('GITHUB_DOCKER_REGISTRY')
    imageName = "${registry}/concordile/${project.name}:${project.version}"
    docker {
        publishRegistry {
            url = project.findProperty('github.pkg.docker.url') ?: System.getenv('GITHUB_DOCKER_URL')
            username = project.findProperty('github.username') ?: System.getenv('GITHUB_ACTOR')
            token = project.findProperty('github.token') ?: System.getenv('GITHUB_TOKEN')
        }
    }
}
